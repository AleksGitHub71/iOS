# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'

# Directories
BUILD_DIR       = File.expand_path('build')

# Build
PROJECT                 = "MEGA.xcodeproj"
WORKSPACE               = "iMEGA.xcworkspace"
SCHEME                  = 'MEGA'
TEMP_KEYCHAIN_NAME      = "fastlane_appstore"
TEMP_KEYCHAIN_PASSWORD  = "TEMP_KEYCHAIN_PASSWORD"

default_platform(:ios)

platform :ios do

  desc "Upload symbols to crashlytics after running the gym"
  lane :upload_symbols do
    upload_symbols_with_dsym_path(
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH]
    )
  end

  desc "Upload symbols to crashlytics with dsym path as parameter"
  lane :upload_symbols_with_dsym_path do |options|
    paths = {
      "MEGA": "./iMEGA/Supporting Files/GoogleService-Info.plist",
      "MEGANotifications": "./iMEGA/Extensions/MEGANotifications/GoogleService-Info.plist",
      "MEGAIntent": "./iMEGA/Extensions/MEGAIntent/Supporting Files/GoogleService-Info.plist",
      "MEGAPicker": "./iMEGA/Extensions/MEGAPicker/GoogleService-Info.plist",
      "MEGAPickerFileProvider": "./iMEGA/Extensions/MEGAPickerFileProvider/GoogleService-Info.plist",
      "MEGAShare": "./iMEGA/Extensions/MEGAShare/Supporting Files/GoogleService-Info.plist",
      "MEGAWidget": "./iMEGA/Extensions/MEGAWidget/Supporting Files/GoogleService-Info.plist"
    }
    paths.each_with_index do |(target, path), index|
      upload_symbols_to_crashlytics(
        dsym_path: options[:dsym_path],
        gsp_path: path,
        step_name: "Uploading dsym #{index + 1} of #{paths.keys.count} - target is #{target}"
      )
    end
  end

  desc "creates temporary keychain"
  lane :create_temporary_keychain do
    delete_keychain(
      name: TEMP_KEYCHAIN_NAME
    ) if File.exist? File.expand_path("~/Library/Keychains/#{TEMP_KEYCHAIN_NAME}-db")

    create_keychain(
      name: TEMP_KEYCHAIN_NAME,
      password: TEMP_KEYCHAIN_PASSWORD,
      unlock: true,
      timeout: 0,
      lock_when_sleeps: false,
      add_to_search_list: true
    )
  end

  desc "installs certificate and profiles for a given profile type to temp keychain created in create_temporary_keychain lane"
  lane :install_certificate_and_profile_to_temp_keychain do |options|
    api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY_B64"],
        is_key_content_base64: true,
        in_house: false
    ) 

    match(
      type: options[:type],
      api_key: api_key,
      keychain_name: TEMP_KEYCHAIN_NAME,
      keychain_password: TEMP_KEYCHAIN_PASSWORD,
      readonly: options[:readonly],
      verbose: true
    )
  end

  desc "set the date and time as build number and write it to build_number file"
  lane :set_time_as_build_number do
    build_number = Time.new.strftime("%y%m%d%H%M")

    increment_build_number(
      build_number: build_number,
      xcodeproj: PROJECT
    )

    File.write("build_number.txt", build_number)
  end

  desc "fetch the version number and write to file named version_number.txt"
  lane :fetch_version_number do
    get_version_number(target: "MEGA")
    File.write("version_number.txt", lane_context[SharedValues::VERSION_NUMBER]) 
  end

  desc "archive for app store"
  lane :archive_appstore do
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      clean: true,
      export_method: "app-store",
      skip_profile_detection: true,
      output_name: "MEGA",
      output_directory: BUILD_DIR,
      configuration: 'Release',
      verbose: true,
      export_options: {
        iCloudContainerEnvironment: "Production",
        signingStyle: "manual",
        provisioningProfiles: {
          "mega.ios": "match AppStore mega.ios",
          "mega.ios.MEGAIntent": "match AppStore mega.ios.MEGAIntent",
          "mega.ios.MEGANotifications": "match AppStore mega.ios.MEGANotifications",
          "mega.ios.MEGAPicker": "match AppStore mega.ios.MEGAPicker",
          "mega.ios.MEGAPickerFileProvider": "match AppStore mega.ios.MEGAPickerFileProvider",
          "mega.ios.MEGAShare": "match AppStore mega.ios.MEGAShare",
          "mega.ios.MEGAWidget": "match AppStore mega.ios.MEGAWidget"
        }
      }
    )
    
    File.write("archive_path.txt", lane_context[SharedValues::XCODEBUILD_ARCHIVE]) 
  end

  desc "Delete the temporary created keychain"
  lane :delete_temporary_keychain do 
    delete_keychain(name: TEMP_KEYCHAIN_NAME)
  end

  desc "Upload to iTunesConnect"
  lane :upload_to_itunesconnect do |options|
    # Get the 20 latest commints from the current branch.
    changelog_from_git_commits(
      commits_count: 20,  
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "include_merges"
    )

    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_B64"],
      is_key_content_base64: true,
      in_house: false
    )

    upload_to_testflight(
      skip_submission: false,
      groups:["MEGA"],
      api_key: api_key,
      ipa: "#{BUILD_DIR}/MEGA.ipa",
      changelog: lane_context[SharedValues::FL_CHANGELOG],
    ) # to only upload the build
  end

  lane :sync_all_code_signing do
    match_configuration(type: "development")
    match_configuration(type: "adhoc")    
    match_configuration(type: "appstore")
  end

  private_lane :match_configuration do |options|
    match(
      type: options[:type],
      verbose: true
    )
  end

  desc "MEGA unit tests"
  lane :tests do
    run_tests(
      scheme: "MEGA",
      devices: ["iPhone 8"]
    )
  end

  desc "Download metadata"
  lane :download_metadata do
    api_key_value = ENV['APP_STORE_CONNECT_API_KEY_VALUE']
    final_api_key_value = api_key_value.gsub("\\n", "\n")

    api_key_json = {
      "key_id": ENV['APP_STORE_CONNECT_KEY_ID'],
      "issuer_id": ENV['APP_STORE_CONNECT_ISSUER_ID'],
      "key": final_api_key_value,
      "in_house": false 
    }

    File.write("api_key_path.json", JSON.dump(api_key_json))
    sh "bundle exec fastlane deliver download_metadata --api_key_path api_key_path.json"
  end

  desc "Uploads metadata to app store connect"
  lane :upload_metadata_to_appstore_connect do
    
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_B64"],
      is_key_content_base64: true,
      in_house: false
    )

    get_version_number(target: "MEGA")

    deliver(
      api_key: api_key,
      app_version: lane_context[SharedValues::VERSION_NUMBER],
      force: true, # Skip HTMl report verification
      skip_screenshots: true,
      skip_binary_upload: true
    )
  end

  desc "Archive using Adhoc"
  lane :archive_adhoc do
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      clean: true,
      export_method: "ad-hoc",
      output_name: "MEGA",
      output_directory: BUILD_DIR,
      configuration: 'Release',
      verbose: true,
      export_options: {
        iCloudContainerEnvironment: "Production"
      }
    )
  end

  desc "Upload build to Firebase"
  lane :upload_build_to_firebase do
    # Get the 20 latest commints from the current branch.
    changelog_from_git_commits(
      commits_count: 20,  
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "include_merges"
    )

    gsp_path = "./iMEGA/Supporting Files/GoogleService-Info.plist"
    google_app_id = get_info_plist_value(path: gsp_path, key: 'GOOGLE_APP_ID')

    firebase_app_distribution(
      app: google_app_id,
      service_credentials_file: "service_credentials_file.json",
      ipa_path: "#{BUILD_DIR}/MEGA.ipa",
      groups: "internal-testers",
      release_notes: lane_context[SharedValues::FL_CHANGELOG]
    )
  end

  desc "zip archive to path"
  lane :zip_Archive do |options|
    zip(
      path: options[:archive_path],
      output_path: options[:zip_path]
    )
  end

end
